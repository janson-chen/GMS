"use strict";
var __decorate = (this && this.__decorate)/* istanbul ignore next */ || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TextSpan_1 = require("./TextSpan");
var utils_1 = require("../../../utils");
/**
 * Represents a text change.
 */
var TextChange = /** @class */ (function () {
    /** @internal */
    function TextChange(compilerObject) {
        this._compilerObject = compilerObject;
    }
    Object.defineProperty(TextChange.prototype, "compilerObject", {
        /** Gets the compiler text change. */
        get: function () {
            return this._compilerObject;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the text span.
     */
    TextChange.prototype.getSpan = function () {
        return new TextSpan_1.TextSpan(this.compilerObject.span);
    };
    /**
     * Gets the new text.
     */
    TextChange.prototype.getNewText = function () {
        return this.compilerObject.newText;
    };
    __decorate([
        utils_1.Memoize
    ], TextChange.prototype, "getSpan", null);
    return TextChange;
}());
exports.TextChange = TextChange;
