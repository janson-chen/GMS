"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var manipulation_1 = require("../../manipulation");
var expression_1 = require("../expression");
exports.RegularExpressionLiteralBase = expression_1.LiteralExpression;
var RegularExpressionLiteral = /** @class */ (function (_super) {
    __extends(RegularExpressionLiteral, _super);
    function RegularExpressionLiteral() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets the literal value.
     */
    RegularExpressionLiteral.prototype.getLiteralValue = function () {
        var pattern = /^\/(.*)\/([^\/]*)$/;
        var text = this.compilerNode.text;
        var matches = pattern.exec(text);
        return new RegExp(matches[1], matches[2]);
    };
    RegularExpressionLiteral.prototype.setLiteralValue = function (regExpOrPattern, flags) {
        var pattern;
        if (typeof regExpOrPattern === "string")
            pattern = regExpOrPattern;
        else {
            pattern = regExpOrPattern.source;
            flags = regExpOrPattern.flags;
        }
        manipulation_1.replaceNodeText({
            sourceFile: this.sourceFile,
            start: this.getStart(),
            replacingLength: this.getWidth(),
            newText: "/" + pattern + "/" + (flags || "")
        });
        return this;
    };
    return RegularExpressionLiteral;
}(exports.RegularExpressionLiteralBase));
exports.RegularExpressionLiteral = RegularExpressionLiteral;
