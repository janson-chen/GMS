"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign)/* istanbul ignore next */ || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("../typescript");
var compiler_1 = require("../compiler");
var utils_1 = require("../utils");
var SettingsContainer_1 = require("./SettingsContainer");
/** Kinds of indentation */
var IndentationText;
(function (IndentationText) {
    /** Two spaces */
    IndentationText["TwoSpaces"] = "  ";
    /** Four spaces */
    IndentationText["FourSpaces"] = "    ";
    /** Eight spaces */
    IndentationText["EightSpaces"] = "        ";
    /** Tab */
    IndentationText["Tab"] = "\t";
})(/* istanbul ignore next */IndentationText = exports.IndentationText || (exports.IndentationText = {}));
/**
 * Holds the manipulation settings.
 */
var ManipulationSettingsContainer = /** @class */ (function (_super) {
    __extends(ManipulationSettingsContainer, _super);
    function ManipulationSettingsContainer() {
        return _super.call(this, {
            indentationText: IndentationText.FourSpaces,
            newLineKind: typescript_1.NewLineKind.LineFeed,
            quoteKind: compiler_1.QuoteKind.Double,
            insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: true
        }) || this;
    }
    /**
     * Gets the editor settings based on the current manipulation settings.
     */
    ManipulationSettingsContainer.prototype.getEditorSettings = function () {
        if (this.editorSettings == null) {
            this.editorSettings = {};
            utils_1.fillDefaultEditorSettings(this.editorSettings, this);
        }
        return __assign({}, this.editorSettings);
    };
    /**
     * Gets the format code settings.
     */
    ManipulationSettingsContainer.prototype.getFormatCodeSettings = function () {
        if (this.formatCodeSettings == null) {
            this.formatCodeSettings = __assign({}, this.getEditorSettings(), { insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: this.settings.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces });
        }
        return __assign({}, this.formatCodeSettings);
    };
    /**
     * Gets the quote kind used for string literals.
     */
    ManipulationSettingsContainer.prototype.getQuoteKind = function () {
        return this.settings.quoteKind;
    };
    /**
     * Gets the new line kind.
     */
    ManipulationSettingsContainer.prototype.getNewLineKind = function () {
        return this.settings.newLineKind;
    };
    /**
     * Gets the new line kind as a string.
     */
    ManipulationSettingsContainer.prototype.getNewLineKindAsString = function () {
        return utils_1.newLineKindToString(this.getNewLineKind());
    };
    /**
     * Gets the indentation text;
     */
    ManipulationSettingsContainer.prototype.getIndentationText = function () {
        return this.settings.indentationText;
    };
    /**
     * Sets one or all of the settings.
     * @param settings - Settings to set.
     */
    ManipulationSettingsContainer.prototype.set = function (settings) {
        _super.prototype.set.call(this, settings);
        this.editorSettings = undefined;
        this.formatCodeSettings = undefined;
    };
    return ManipulationSettingsContainer;
}(SettingsContainer_1.SettingsContainer));
exports.ManipulationSettingsContainer = ManipulationSettingsContainer;
