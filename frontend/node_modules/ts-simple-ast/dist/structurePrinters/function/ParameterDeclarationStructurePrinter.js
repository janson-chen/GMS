"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../utils");
var StructurePrinter_1 = require("../StructurePrinter");
var base_1 = require("../base");
var decorator_1 = require("../decorator");
var formatting_1 = require("../formatting");
var ParameterDeclarationStructurePrinter = /** @class */ (function (_super) {
    __extends(ParameterDeclarationStructurePrinter, _super);
    function ParameterDeclarationStructurePrinter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifierWriter = new base_1.ModifierableNodeStructurePrinter(_this.writer);
        _this.commaSeparatedWriter = new formatting_1.CommaSeparatedStructuresPrinter(_this.writer, _this);
        _this.decoratorWriter = new decorator_1.DecoratorStructurePrinter(_this.writer);
        return _this;
    }
    ParameterDeclarationStructurePrinter.prototype.printTexts = function (structures) {
        if (structures == null || structures.length === 0)
            return;
        this.commaSeparatedWriter.printText(structures);
    };
    ParameterDeclarationStructurePrinter.prototype.printText = function (structure) {
        this.decoratorWriter.printTextsInline(structure.decorators);
        this.modifierWriter.printText(structure);
        this.writer.conditionalWrite(structure.isRestParameter, "...");
        this.writer.write(structure.name);
        this.writer.conditionalWrite(structure.hasQuestionToken, "?");
        if (!utils_1.StringUtils.isNullOrWhitespace(structure.type) || structure.hasQuestionToken)
            this.writer.write(": " + (structure.type || "any"));
        if (!utils_1.StringUtils.isNullOrWhitespace(structure.initializer))
            this.writer.write(" = " + structure.initializer);
    };
    return ParameterDeclarationStructurePrinter;
}(StructurePrinter_1.StructurePrinter));
exports.ParameterDeclarationStructurePrinter = ParameterDeclarationStructurePrinter;
