"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var code_block_writer_1 = require("code-block-writer");
var StructurePrinter_1 = require("../StructurePrinter");
var StatementedNodeStructurePrinter_1 = require("./StatementedNodeStructurePrinter");
var BodyTextStructurePrinter = /** @class */ (function (_super) {
    __extends(BodyTextStructurePrinter, _super);
    function BodyTextStructurePrinter(writer, options) {
        var _this = _super.call(this, writer) || this;
        _this.options = options;
        _this.statementWriter = new StatementedNodeStructurePrinter_1.StatementedNodeStructurePrinter(_this.writer, _this.options);
        return _this;
    }
    BodyTextStructurePrinter.prototype.printText = function (structure) {
        this.statementWriter.printText(structure);
        // todo: hacky, will need to change this in the future...
        // basically, need a way to make this only do the blank line if the user does a write
        var newWriter = new code_block_writer_1.default(this.writer.getOptions());
        this.printTextOrWriterFunc(structure.bodyText, newWriter);
        if (newWriter.getLength() > 0) {
            if (!this.writer.isAtStartOfFirstLineOfBlock())
                this.writer.blankLineIfLastNot();
            this.writer.write(newWriter.toString());
        }
    };
    return BodyTextStructurePrinter;
}(StructurePrinter_1.StructurePrinter));
exports.BodyTextStructurePrinter = BodyTextStructurePrinter;
