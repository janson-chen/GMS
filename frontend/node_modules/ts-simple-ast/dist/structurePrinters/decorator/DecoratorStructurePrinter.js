"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var StructurePrinter_1 = require("../StructurePrinter");
var DecoratorStructurePrinter = /** @class */ (function (_super) {
    __extends(DecoratorStructurePrinter, _super);
    function DecoratorStructurePrinter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DecoratorStructurePrinter.prototype.printTexts = function (structures) {
        this.printMultiple(structures, function (writer) { return writer.newLine(); });
    };
    DecoratorStructurePrinter.prototype.printTextsInline = function (structures) {
        this.printMultiple(structures, function (writer) { return writer.space(); });
    };
    DecoratorStructurePrinter.prototype.printText = function (structure) {
        this.writer.write("@" + structure.name);
        if (structure.arguments != null)
            this.writer.write("(" + structure.arguments.join(", ") + ")");
    };
    DecoratorStructurePrinter.prototype.printMultiple = function (structures, separator) {
        if (structures == null || structures.length === 0)
            return;
        try {
            for (var structures_1 = __values(structures), structures_1_1 = structures_1.next(); !structures_1_1.done; structures_1_1 = structures_1.next()) {
                var structure = structures_1_1.value;
                this.printText(structure);
                separator(this.writer);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (structures_1_1 && !structures_1_1.done && (_a = structures_1.return)) _a.call(structures_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    return DecoratorStructurePrinter;
}(StructurePrinter_1.StructurePrinter));
exports.DecoratorStructurePrinter = DecoratorStructurePrinter;
