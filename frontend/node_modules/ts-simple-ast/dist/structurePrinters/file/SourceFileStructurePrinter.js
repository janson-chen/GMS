"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../utils");
var StructurePrinter_1 = require("../StructurePrinter");
var statement_1 = require("../statement");
var ImportDeclarationStructurePrinter_1 = require("./ImportDeclarationStructurePrinter");
var ExportDeclarationStructurePrinter_1 = require("./ExportDeclarationStructurePrinter");
var SourceFileStructurePrinter = /** @class */ (function (_super) {
    __extends(SourceFileStructurePrinter, _super);
    function SourceFileStructurePrinter(writer, options) {
        var _this = _super.call(this, writer) || this;
        _this.options = options;
        _this.bodyTextWriter = new statement_1.BodyTextStructurePrinter(_this.writer, { isAmbient: _this.options.isAmbient });
        _this.importWriter = new ImportDeclarationStructurePrinter_1.ImportDeclarationStructurePrinter(_this.writer, _this.options.formatSettings);
        _this.exportWriter = new ExportDeclarationStructurePrinter_1.ExportDeclarationStructurePrinter(_this.writer, _this.options.formatSettings);
        return _this;
    }
    SourceFileStructurePrinter.prototype.printText = function (structure) {
        this.importWriter.printTexts(structure.imports);
        this.bodyTextWriter.printText(structure);
        this.conditionalBlankLine(structure.exports);
        this.exportWriter.printTexts(structure.exports);
        this.writer.conditionalNewLine(!this.writer.isAtStartOfFirstLineOfBlock() && !this.writer.isLastNewLine());
    };
    SourceFileStructurePrinter.prototype.conditionalBlankLine = function (structures) {
        if (!utils_1.ArrayUtils.isNullOrEmpty(structures))
            this.writer.conditionalBlankLine(!this.writer.isAtStartOfFirstLineOfBlock());
    };
    return SourceFileStructurePrinter;
}(StructurePrinter_1.StructurePrinter));
exports.SourceFileStructurePrinter = SourceFileStructurePrinter;
