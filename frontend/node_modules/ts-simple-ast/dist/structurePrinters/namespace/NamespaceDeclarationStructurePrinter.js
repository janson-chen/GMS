"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var StructurePrinter_1 = require("../StructurePrinter");
var base_1 = require("../base");
var doc_1 = require("../doc");
var formatting_1 = require("../formatting");
var statement_1 = require("../statement");
var NamespaceDeclarationStructurePrinter = /** @class */ (function (_super) {
    __extends(NamespaceDeclarationStructurePrinter, _super);
    function NamespaceDeclarationStructurePrinter(writer, options) {
        var _this = _super.call(this, writer) || this;
        _this.options = options;
        _this.jsDocWriter = new doc_1.JSDocStructurePrinter(_this.writer);
        _this.modifierWriter = new base_1.ModifierableNodeStructurePrinter(_this.writer);
        _this.blankLineFormattingWriter = new formatting_1.BlankLineFormattingStructuresPrinter(_this.writer, _this);
        return _this;
    }
    NamespaceDeclarationStructurePrinter.prototype.printTexts = function (structures) {
        this.blankLineFormattingWriter.printText(structures);
    };
    NamespaceDeclarationStructurePrinter.prototype.printText = function (structure) {
        var _this = this;
        this.jsDocWriter.printDocs(structure.docs);
        this.modifierWriter.printText(structure);
        this.writer.write((structure.hasModuleKeyword ? "module" : "namespace") + " " + structure.name + " ").inlineBlock(function () {
            new statement_1.BodyTextStructurePrinter(_this.writer, {
                isAmbient: structure.hasDeclareKeyword || _this.options.isAmbient
            }).printText(structure);
        });
    };
    return NamespaceDeclarationStructurePrinter;
}(StructurePrinter_1.StructurePrinter));
exports.NamespaceDeclarationStructurePrinter = NamespaceDeclarationStructurePrinter;
