"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../utils");
var StructurePrinter_1 = require("../StructurePrinter");
var base_1 = require("../base");
var decorator_1 = require("../decorator");
var function_1 = require("../function");
var doc_1 = require("../doc");
var statement_1 = require("../statement");
var types_1 = require("../types");
var MethodDeclarationStructurePrinter = /** @class */ (function (_super) {
    __extends(MethodDeclarationStructurePrinter, _super);
    function MethodDeclarationStructurePrinter(writer, options) {
        var _this = _super.call(this, writer) || this;
        _this.options = options;
        _this.jsDocWriter = new doc_1.JSDocStructurePrinter(_this.writer);
        _this.modifierWriter = new base_1.ModifierableNodeStructurePrinter(_this.writer);
        _this.decoratorWriter = new decorator_1.DecoratorStructurePrinter(_this.writer);
        _this.parametersWriter = new function_1.ParameterDeclarationStructurePrinter(_this.writer);
        _this.typeParametersWriter = new types_1.TypeParameterDeclarationStructurePrinter(_this.writer);
        _this.bodyWriter = new statement_1.BodyTextStructurePrinter(_this.writer, _this.options);
        return _this;
    }
    MethodDeclarationStructurePrinter.prototype.printTexts = function (structures) {
        if (structures == null)
            return;
        for (var i = 0; i < structures.length; i++) {
            if (i > 0) {
                if (this.options.isAmbient)
                    this.writer.newLine();
                else
                    this.writer.blankLine();
            }
            this.printText(structures[i]);
        }
    };
    MethodDeclarationStructurePrinter.prototype.printText = function (structure) {
        var _this = this;
        this.printOverloads(structure.name, getOverloadStructures());
        this.printBase(structure.name, structure);
        if (this.options.isAmbient)
            this.writer.write(";");
        else
            this.writer.spaceIfLastNot().inlineBlock(function () {
                _this.bodyWriter.printText(structure);
            });
        function getOverloadStructures() {
            // all the overloads need to have the same scope as the implementation
            var overloads = utils_1.ObjectUtils.clone(structure.overloads);
            if (overloads == null || overloads.length === 0)
                return;
            try {
                for (var overloads_1 = __values(overloads), overloads_1_1 = overloads_1.next(); !overloads_1_1.done; overloads_1_1 = overloads_1.next()) {
                    var overload = overloads_1_1.value;
                    utils_1.setValueIfUndefined(overload, "scope", structure.scope);
                    utils_1.setValueIfUndefined(overload, "isStatic", structure.isStatic); // allow people to do stupid things
                    utils_1.setValueIfUndefined(overload, "isAbstract", structure.isAbstract);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (overloads_1_1 && !overloads_1_1.done && (_a = overloads_1.return)) _a.call(overloads_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return overloads;
            var e_1, _a;
        }
    };
    MethodDeclarationStructurePrinter.prototype.printOverloads = function (name, structures) {
        if (structures == null || structures.length === 0)
            return;
        try {
            for (var structures_1 = __values(structures), structures_1_1 = structures_1.next(); !structures_1_1.done; structures_1_1 = structures_1.next()) {
                var structure = structures_1_1.value;
                this.printOverload(name, structure);
                this.writer.newLine();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (structures_1_1 && !structures_1_1.done && (_a = structures_1.return)) _a.call(structures_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _a;
    };
    MethodDeclarationStructurePrinter.prototype.printOverload = function (name, structure) {
        this.printBase(name, structure);
        this.writer.write(";");
    };
    MethodDeclarationStructurePrinter.prototype.printBase = function (name, structure) {
        this.jsDocWriter.printDocs(structure.docs);
        this.decoratorWriter.printTexts(structure.decorators);
        this.modifierWriter.printText(structure);
        this.writer.write(name);
        this.typeParametersWriter.printTexts(structure.typeParameters);
        this.writer.write("(");
        this.parametersWriter.printTexts(structure.parameters);
        this.writer.write(")");
        this.writer.conditionalWrite(structure.returnType != null && structure.returnType.length > 0, ": " + structure.returnType);
    };
    return MethodDeclarationStructurePrinter;
}(StructurePrinter_1.StructurePrinter));
exports.MethodDeclarationStructurePrinter = MethodDeclarationStructurePrinter;
