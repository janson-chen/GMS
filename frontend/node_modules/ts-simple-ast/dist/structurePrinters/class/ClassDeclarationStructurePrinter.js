"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read)/* istanbul ignore next */ || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread)/* istanbul ignore next */ || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../utils");
var StructurePrinter_1 = require("../StructurePrinter");
var formatting_1 = require("../formatting");
var base_1 = require("../base");
var doc_1 = require("../doc");
var decorator_1 = require("../decorator");
var types_1 = require("../types");
var PropertyDeclarationStructurePrinter_1 = require("./PropertyDeclarationStructurePrinter");
var ConstructorDeclarationStructurePrinter_1 = require("./ConstructorDeclarationStructurePrinter");
var MethodDeclarationStructurePrinter_1 = require("./MethodDeclarationStructurePrinter");
var GetAccessorDeclarationStructurePrinter_1 = require("./GetAccessorDeclarationStructurePrinter");
var SetAccessorDeclarationStructurePrinter_1 = require("./SetAccessorDeclarationStructurePrinter");
var ClassDeclarationStructurePrinter = /** @class */ (function (_super) {
    __extends(ClassDeclarationStructurePrinter, _super);
    function ClassDeclarationStructurePrinter(writer, options) {
        var _this = _super.call(this, writer) || this;
        _this.options = options;
        _this.jsDocWriter = new doc_1.JSDocStructurePrinter(_this.writer);
        _this.decoratorWriter = new decorator_1.DecoratorStructurePrinter(_this.writer);
        _this.modifierWriter = new base_1.ModifierableNodeStructurePrinter(_this.writer);
        _this.typeParametersWriter = new types_1.TypeParameterDeclarationStructurePrinter(_this.writer);
        _this.blankLineFormattingWriter = new formatting_1.BlankLineFormattingStructuresPrinter(_this.writer, _this);
        _this.propertyWriter = new PropertyDeclarationStructurePrinter_1.PropertyDeclarationStructurePrinter(_this.writer);
        return _this;
    }
    ClassDeclarationStructurePrinter.prototype.printTexts = function (structures) {
        this.blankLineFormattingWriter.printText(structures);
    };
    ClassDeclarationStructurePrinter.prototype.printText = function (structure) {
        var _this = this;
        var isAmbient = structure.hasDeclareKeyword || this.options.isAmbient;
        this.jsDocWriter.printDocs(structure.docs);
        this.decoratorWriter.printTexts(structure.decorators);
        this.modifierWriter.printText(structure);
        this.writer.write("class");
        // can be null, ex. `export default class { ... }`
        if (!utils_1.StringUtils.isNullOrWhitespace(structure.name))
            this.writer.space().write(structure.name);
        this.typeParametersWriter.printTexts(structure.typeParameters);
        this.writer.space();
        if (!utils_1.StringUtils.isNullOrWhitespace(structure.extends))
            this.writer.write("extends " + structure.extends + " ");
        if (!utils_1.ArrayUtils.isNullOrEmpty(structure.implements))
            this.writer.write("implements " + structure.implements.join(", ") + " ");
        this.writer.inlineBlock(function () {
            _this.propertyWriter.printTexts(structure.properties);
            if (structure.ctor != null) {
                _this.conditionalSeparator(isAmbient);
                new ConstructorDeclarationStructurePrinter_1.ConstructorDeclarationStructurePrinter(_this.writer, { isAmbient: isAmbient }).printText(structure.ctor);
            }
            _this.printGetAndSet(structure, isAmbient);
            if (!utils_1.ArrayUtils.isNullOrEmpty(structure.methods)) {
                _this.conditionalSeparator(isAmbient);
                new MethodDeclarationStructurePrinter_1.MethodDeclarationStructurePrinter(_this.writer, { isAmbient: isAmbient }).printTexts(structure.methods);
            }
        });
    };
    ClassDeclarationStructurePrinter.prototype.printGetAndSet = function (structure, isAmbient) {
        var getAccessors = __spread(structure.getAccessors || []);
        var setAccessors = __spread(structure.setAccessors || []);
        var getAccessorWriter = new GetAccessorDeclarationStructurePrinter_1.GetAccessorDeclarationStructurePrinter(this.writer, { isAmbient: isAmbient });
        var setAccessorWriter = new SetAccessorDeclarationStructurePrinter_1.SetAccessorDeclarationStructurePrinter(this.writer, { isAmbient: isAmbient });
        var _loop_1 = function (getAccessor) {
            this_1.conditionalSeparator(isAmbient);
            getAccessorWriter.printText(getAccessor);
            // write the corresponding set accessor beside the get accessor
            var setAccessorIndex = utils_1.ArrayUtils.findIndex(setAccessors, function (item) { return item.name === getAccessor.name; });
            if (setAccessorIndex >= 0) {
                this_1.conditionalSeparator(isAmbient);
                setAccessorWriter.printText(setAccessors[setAccessorIndex]);
                setAccessors.splice(setAccessorIndex, 1);
            }
        };
        var this_1 = this;
        try {
            for (var getAccessors_1 = __values(getAccessors), getAccessors_1_1 = getAccessors_1.next(); !getAccessors_1_1.done; getAccessors_1_1 = getAccessors_1.next()) {
                var getAccessor = getAccessors_1_1.value;
                _loop_1(getAccessor);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (getAccessors_1_1 && !getAccessors_1_1.done && (_a = getAccessors_1.return)) _a.call(getAccessors_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var setAccessors_1 = __values(setAccessors), setAccessors_1_1 = setAccessors_1.next(); !setAccessors_1_1.done; setAccessors_1_1 = setAccessors_1.next()) {
                var setAccessor = setAccessors_1_1.value;
                this.conditionalSeparator(isAmbient);
                setAccessorWriter.printText(setAccessor);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (setAccessors_1_1 && !setAccessors_1_1.done && (_b = setAccessors_1.return)) _b.call(setAccessors_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_1, _a, e_2, _b;
    };
    ClassDeclarationStructurePrinter.prototype.conditionalSeparator = function (isAmbient) {
        if (this.writer.isAtStartOfFirstLineOfBlock())
            return;
        if (isAmbient)
            this.writer.newLine();
        else
            this.writer.blankLine();
    };
    return ClassDeclarationStructurePrinter;
}(StructurePrinter_1.StructurePrinter));
exports.ClassDeclarationStructurePrinter = ClassDeclarationStructurePrinter;
