"use strict";
var __awaiter = (this && this.__awaiter)/* istanbul ignore next */ || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator)/* istanbul ignore next */ || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors = require("../errors");
var utils_1 = require("../utils");
/**
 * File system host wrapper that allows queuing deletions to the file system.
 */
var FileSystemWrapper = /** @class */ (function () {
    function FileSystemWrapper(fileSystem, pathsToDelete) {
        if (pathsToDelete === void 0) { pathsToDelete = utils_1.createHashSet(); }
        this.fileSystem = fileSystem;
        this.pathsToDelete = pathsToDelete;
    }
    FileSystemWrapper.prototype.queueDelete = function (path) {
        path = this.getStandardizedAbsolutePath(path);
        this.pathsToDelete.add(path);
    };
    FileSystemWrapper.prototype.dequeueDelete = function (path) {
        path = this.getStandardizedAbsolutePath(path);
        this.removeFromPathsToDelete(path);
    };
    FileSystemWrapper.prototype.flush = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var pathsToDeleteForFlush, deletions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pathsToDeleteForFlush = this.getPathsToDeleteForFlush();
                        this.pathsToDelete.clear();
                        deletions = pathsToDeleteForFlush.map(function (path) { return _this.deleteSuppressNotFound(path); });
                        return [4 /*yield*/, Promise.all(deletions)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FileSystemWrapper.prototype.flushSync = function () {
        try {
            for (var _a = __values(this.getPathsToDeleteForFlush()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var path = _b.value;
                this.deleteImmediatelySync(path);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _c;
    };
    FileSystemWrapper.prototype.getPathsToDeleteForFlush = function () {
        // todo: optimize so that if a path's ancestor directory is being deleted, it won't bother deleting the sub paths
        // Need to be mindful of restoring the state in case it fails though.
        return utils_1.ArrayUtils.sortByProperty(utils_1.ArrayUtils.from(this.pathsToDelete.values()), function (a) { return -1 * a.length; });
    };
    FileSystemWrapper.prototype.deleteImmediately = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var pathsToRemove, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.getStandardizedAbsolutePath(path);
                        pathsToRemove = this.getChildDirsAndFilesFromPathsToDelete(path);
                        pathsToRemove.forEach(function (p) { return _this.pathsToDelete.delete(p); });
                        this.pathsToDelete.delete(path);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.deleteSuppressNotFound(path)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        pathsToRemove.forEach(function (p) { return _this.pathsToDelete.add(p); });
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemWrapper.prototype.deleteImmediatelySync = function (path) {
        var _this = this;
        path = this.getStandardizedAbsolutePath(path);
        var pathsToRemove = this.getChildDirsAndFilesFromPathsToDelete(path);
        pathsToRemove.forEach(function (p) { return _this.pathsToDelete.delete(p); });
        this.pathsToDelete.delete(path);
        try {
            this.deleteSuppressNotFoundSync(path);
        }
        catch (err) {
            pathsToRemove.forEach(function (p) { return _this.pathsToDelete.add(p); });
            throw err;
        }
    };
    FileSystemWrapper.prototype.deleteSuppressNotFound = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.fileSystem.delete(path)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_2 = _a.sent();
                        if (!utils_1.FileUtils.isNotExistsError(err_2)) {
                            this.pathsToDelete.add(path);
                            throw err_2;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemWrapper.prototype.deleteSuppressNotFoundSync = function (path) {
        try {
            this.fileSystem.deleteSync(path);
        }
        catch (err) {
            if (!utils_1.FileUtils.isNotExistsError(err)) {
                this.pathsToDelete.add(path);
                throw err;
            }
        }
    };
    FileSystemWrapper.prototype.fileExistsSync = function (filePath) {
        filePath = this.getStandardizedAbsolutePath(filePath);
        if (this.pathsToDeleteHas(filePath))
            return false;
        return this.fileSystem.fileExistsSync(filePath);
    };
    FileSystemWrapper.prototype.directoryExists = function (dirPath) {
        dirPath = this.getStandardizedAbsolutePath(dirPath);
        if (this.pathsToDeleteHas(dirPath))
            return Promise.resolve(false);
        return this.fileSystem.directoryExists(dirPath);
    };
    FileSystemWrapper.prototype.directoryExistsSync = function (dirPath) {
        dirPath = this.getStandardizedAbsolutePath(dirPath);
        if (this.pathsToDeleteHas(dirPath))
            return false;
        return this.fileSystem.directoryExistsSync(dirPath);
    };
    FileSystemWrapper.prototype.readFileSync = function (filePath, encoding) {
        filePath = this.getStandardizedAbsolutePath(filePath);
        if (this.pathsToDeleteHas(filePath))
            throw new errors.InvalidOperationError("Cannot read file at " + filePath + " when it is queued for deletion.");
        return this.fileSystem.readFileSync(filePath, encoding);
    };
    FileSystemWrapper.prototype.readDirSync = function (dirPath) {
        var _this = this;
        dirPath = this.getStandardizedAbsolutePath(dirPath);
        if (this.pathsToDeleteHas(dirPath))
            throw new errors.InvalidOperationError("Cannot read directory at " + dirPath + " when it is queued for deletion.");
        return this.fileSystem.readDirSync(dirPath).filter(function (path) { return !_this.pathsToDelete.has(path); });
    };
    FileSystemWrapper.prototype.glob = function (patterns) {
        var _this = this;
        return this.fileSystem.glob(patterns).filter(function (path) { return !_this.pathsToDelete.has(path); });
    };
    FileSystemWrapper.prototype.getFileSystem = function () {
        return this.fileSystem;
    };
    FileSystemWrapper.prototype.getCurrentDirectory = function () {
        return this.fileSystem.getCurrentDirectory();
    };
    FileSystemWrapper.prototype.getStandardizedAbsolutePath = function (fileOrDirPath, relativeBase) {
        return utils_1.FileUtils.getStandardizedAbsolutePath(this.fileSystem, fileOrDirPath, relativeBase);
    };
    FileSystemWrapper.prototype.readFileOrNotExists = function (filePath, encoding) {
        filePath = this.getStandardizedAbsolutePath(filePath);
        if (this.pathsToDeleteHas(filePath))
            return false;
        return utils_1.FileUtils.readFileOrNotExists(this.fileSystem, filePath, encoding);
    };
    FileSystemWrapper.prototype.readFileOrNotExistsSync = function (filePath, encoding) {
        filePath = this.getStandardizedAbsolutePath(filePath);
        if (this.pathsToDeleteHas(filePath))
            return false;
        return utils_1.FileUtils.readFileOrNotExistsSync(this.fileSystem, filePath, encoding);
    };
    FileSystemWrapper.prototype.writeFile = function (filePath, fileText) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filePath = this.getStandardizedAbsolutePath(filePath);
                        this.pathsToDelete.delete(filePath);
                        return [4 /*yield*/, utils_1.FileUtils.ensureDirectoryExists(this, utils_1.FileUtils.getDirPath(filePath))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.fileSystem.writeFile(filePath, fileText)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FileSystemWrapper.prototype.writeFileSync = function (filePath, fileText) {
        filePath = this.getStandardizedAbsolutePath(filePath);
        this.pathsToDelete.delete(filePath);
        utils_1.FileUtils.ensureDirectoryExistsSync(this, utils_1.FileUtils.getDirPath(filePath));
        this.fileSystem.writeFileSync(filePath, fileText);
    };
    FileSystemWrapper.prototype.mkdirSync = function (dirPath) {
        dirPath = this.getStandardizedAbsolutePath(dirPath);
        this.removeFromPathsToDelete(dirPath);
        this.fileSystem.mkdirSync(dirPath);
    };
    FileSystemWrapper.prototype.mkdir = function (dirPath) {
        dirPath = this.getStandardizedAbsolutePath(dirPath);
        this.removeFromPathsToDelete(dirPath);
        return this.fileSystem.mkdir(dirPath);
    };
    FileSystemWrapper.prototype.pathsToDeleteHas = function (path) {
        if (this.pathsToDelete.has(path))
            return true;
        var parentDirPath = utils_1.FileUtils.getDirPath(path);
        if (parentDirPath !== path && this.pathsToDeleteHas(parentDirPath))
            return true;
        return false;
    };
    FileSystemWrapper.prototype.removeFromPathsToDelete = function (path) {
        this.pathsToDelete.delete(path);
        var parentDirPath = utils_1.FileUtils.getDirPath(path);
        if (parentDirPath !== path)
            this.removeFromPathsToDelete(parentDirPath);
    };
    FileSystemWrapper.prototype.getChildDirsAndFilesFromPathsToDelete = function (dirPath) {
        return utils_1.ArrayUtils.from(this.pathsToDelete.values())
            .filter(function (path) { return utils_1.FileUtils.pathStartsWith(path, dirPath); });
    };
    return FileSystemWrapper;
}());
exports.FileSystemWrapper = FileSystemWrapper;
