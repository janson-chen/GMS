"use strict";
var __awaiter = (this && this.__awaiter)/* istanbul ignore next */ || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator)/* istanbul ignore next */ || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read)/* istanbul ignore next */ || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread)/* istanbul ignore next */ || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var globParent = require("glob-parent");
var isNegatedGlob = require("is-negated-glob");
var toAbsoluteGlob = require("@dsherret/to-absolute-glob");
var StringUtils_1 = require("./StringUtils");
var ArrayUtils_1 = require("./ArrayUtils");
var FileUtils = /** @class */ (function () {
    function FileUtils() {
    }
    /**
     * Gets if the error is a file not found or directory not found error.
     * @param err - Error to check.
     */
    FileUtils.isNotExistsError = function (err) {
        return err.code === FileUtils.ENOENT;
    };
    /**
     * Ensure the directory exists synchronously.
     * @param fileSystemWrapper - File system wrapper.
     * @param dirPath - Directory path.
     */
    FileUtils.ensureDirectoryExistsSync = function (fileSystemWrapper, dirPath) {
        if (fileSystemWrapper.directoryExistsSync(dirPath))
            return;
        // ensure the parent exists and is not the root
        var parentDirPath = path.dirname(dirPath);
        if (parentDirPath !== dirPath && path.dirname(parentDirPath) !== parentDirPath)
            FileUtils.ensureDirectoryExistsSync(fileSystemWrapper, parentDirPath);
        // make this directory
        fileSystemWrapper.mkdirSync(dirPath);
    };
    /**
     * Ensure the directory exists asynchronously.
     * @param host - File system host.
     * @param dirPath - Directory path.
     */
    FileUtils.ensureDirectoryExists = function (host, dirPath) {
        return __awaiter(this, void 0, void 0, function () {
            var parentDirPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, host.directoryExists(dirPath)];
                    case 1:
                        if (_a.sent())
                            return [2 /*return*/];
                        parentDirPath = path.dirname(dirPath);
                        if (!(parentDirPath !== dirPath && path.dirname(parentDirPath) !== parentDirPath)) return [3 /*break*/, 3];
                        return [4 /*yield*/, FileUtils.ensureDirectoryExists(host, parentDirPath)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: 
                    // make this directory
                    return [4 /*yield*/, host.mkdir(dirPath)];
                    case 4:
                        // make this directory
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Joins the paths.
     * @param paths - Paths to join.
     */
    FileUtils.pathJoin = function () {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        return FileUtils.standardizeSlashes(path.join.apply(path, __spread(paths)));
    };
    /**
     * Gets if the path is absolute.
     * @param fileOrDirPath - File or directory path.
     */
    FileUtils.pathIsAbsolute = function (fileOrDirPath) {
        return path.isAbsolute(fileOrDirPath);
    };
    /**
     * Gets the standardized absolute path.
     * @param fileSystem - File system.
     * @param fileOrDirPath - Path to standardize.
     * @param relativeBase - Base path to be relative from.
     */
    FileUtils.getStandardizedAbsolutePath = function (fileSystem, fileOrDirPath, relativeBase) {
        var isAbsolutePath = path.isAbsolute(fileOrDirPath);
        if (relativeBase != null && !isAbsolutePath)
            fileOrDirPath = path.join(relativeBase, fileOrDirPath);
        else if (!isAbsolutePath)
            fileOrDirPath = path.join(fileSystem.getCurrentDirectory(), fileOrDirPath);
        return FileUtils.standardizeSlashes(path.normalize(fileOrDirPath));
    };
    /**
     * Gets the directory path.
     * @param fileOrDirPath - Path to get the directory name from.
     */
    FileUtils.getDirPath = function (fileOrDirPath) {
        return FileUtils.standardizeSlashes(path.dirname(fileOrDirPath));
    };
    /**
     * Gets the base name.
     * @param fileOrDirPath - Path to get the base name from.
     */
    FileUtils.getBaseName = function (fileOrDirPath) {
        return path.basename(fileOrDirPath);
    };
    /**
     * Gets the extension of the file name.
     * @param fileOrDirPath - Path to get the extension from.
     */
    FileUtils.getExtension = function (fileOrDirPath) {
        var baseName = FileUtils.getBaseName(fileOrDirPath);
        var lastDotIndex = baseName.lastIndexOf(".");
        if (lastDotIndex <= 0) // for files like .gitignore, need to include 0
            return ""; // same behaviour as node
        var lastExt = baseName.substring(lastDotIndex);
        var lastExtLowerCase = lastExt.toLowerCase();
        if (lastExtLowerCase === ".ts" && baseName.substring(lastDotIndex - 2, lastDotIndex).toLowerCase() === ".d")
            return baseName.substring(lastDotIndex - 2);
        if (lastExtLowerCase === ".map" && baseName.substring(lastDotIndex - 3, lastDotIndex).toLowerCase() === ".js")
            return baseName.substring(lastDotIndex - 3);
        return lastExt;
    };
    /**
     * Changes all back slashes to forward slashes.
     * @param fileOrDirPath - Path.
     */
    FileUtils.standardizeSlashes = function (fileOrDirPath) {
        return fileOrDirPath.replace(this.standardizeSlashesRegex, "/");
    };
    /**
     * Checks if a path ends with a specified search path.
     * @param fileOrDirPath - Path.
     * @param endsWithPath - Ends with path.
     */
    FileUtils.pathEndsWith = function (fileOrDirPath, endsWithPath) {
        var pathItems = FileUtils.splitPathBySlashes(fileOrDirPath);
        var endsWithItems = FileUtils.splitPathBySlashes(endsWithPath);
        if (endsWithItems.length > pathItems.length)
            return false;
        for (var i = 0; i < endsWithItems.length; i++) {
            if (endsWithItems[endsWithItems.length - i - 1] !== pathItems[pathItems.length - i - 1])
                return false;
        }
        return endsWithItems.length > 0;
    };
    /**
     * Checks if a path starts with a specified search path.
     * @param fileOrDirPath - Path.
     * @param startsWithPath - Starts with path.
     */
    FileUtils.pathStartsWith = function (fileOrDirPath, startsWithPath) {
        var isfileOrDirPathEmpty = StringUtils_1.StringUtils.isNullOrWhitespace(fileOrDirPath);
        var isStartsWithPathEmpty = StringUtils_1.StringUtils.isNullOrWhitespace(startsWithPath);
        var pathItems = FileUtils.splitPathBySlashes(fileOrDirPath);
        var startsWithItems = FileUtils.splitPathBySlashes(startsWithPath);
        if (isfileOrDirPathEmpty && isStartsWithPathEmpty)
            return true;
        if (isStartsWithPathEmpty || startsWithItems.length > pathItems.length)
            return false;
        // return true for the root directory
        if (startsWithItems.length === 1 && startsWithItems[0].length === 0)
            return true;
        for (var i = 0; i < startsWithItems.length; i++) {
            if (startsWithItems[i] !== pathItems[i])
                return false;
        }
        return startsWithItems.length > 0;
    };
    FileUtils.splitPathBySlashes = function (fileOrDirPath) {
        fileOrDirPath = (fileOrDirPath || "").replace(FileUtils.trimSlashStartRegex, "").replace(FileUtils.trimSlashEndRegex, "");
        return FileUtils.standardizeSlashes(fileOrDirPath).replace(/^\//, "").split("/");
    };
    /**
     * Gets the parent most paths out of the list of paths.
     * @param paths - File or directory paths.
     */
    FileUtils.getParentMostPaths = function (paths) {
        var finalPaths = [];
        var _loop_1 = function (fileOrDirPath) {
            if (finalPaths.every(function (p) { return !FileUtils.pathStartsWith(fileOrDirPath, p); }))
                finalPaths.push(fileOrDirPath);
        };
        try {
            for (var _a = __values(ArrayUtils_1.ArrayUtils.sortByProperty(paths, function (p) { return p.length; })), _b = _a.next(); !_b.done; _b = _a.next()) {
                var fileOrDirPath = _b.value;
                _loop_1(fileOrDirPath);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return finalPaths;
        var e_1, _c;
    };
    /**
     * Reads a file or returns false if the file doesn't exist.
     * @param fileSystem - File System.
     * @param filePath - Path to file.
     * @param encoding - File encoding.
     */
    FileUtils.readFileOrNotExists = function (fileSystem, filePath, encoding) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fileSystem.readFile(filePath, encoding)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_1 = _a.sent();
                        if (!FileUtils.isNotExistsError(err_1))
                            throw err_1;
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Reads a file synchronously or returns false if the file doesn't exist.
     * @param fileSystem - File System.
     * @param filePath - Path to file.
     * @param encoding - File encoding.
     */
    FileUtils.readFileOrNotExistsSync = function (fileSystem, filePath, encoding) {
        try {
            return fileSystem.readFileSync(filePath, encoding);
        }
        catch (err) {
            if (!FileUtils.isNotExistsError(err))
                throw err;
            return false;
        }
    };
    /**
     * Gets the text with a byte order mark.
     * @param text - Text.
     */
    FileUtils.getTextWithByteOrderMark = function (text) {
        var bom = "\ufeff";
        if (text[0] === bom)
            return text;
        return bom + text;
    };
    /**
     * Gets the relative path from one absolute path to another.
     * @param absolutePathFrom - Absolute path from.
     * @param absolutePathTo - Absolute path to.
     */
    FileUtils.getRelativePathTo = function (absolutePathFrom, absolutePathTo) {
        var relativePath = path.relative(path.dirname(absolutePathFrom), path.dirname(absolutePathTo));
        return FileUtils.standardizeSlashes(path.join(relativePath, path.basename(absolutePathTo)));
    };
    /**
     * Gets if the path is for the root directory.
     * @param path - Path.
     */
    FileUtils.isRootDirPath = function (dirOrFilePath) {
        return dirOrFilePath === FileUtils.getDirPath(dirOrFilePath);
    };
    /**
     * Gets the descendant directories of the specified directory.
     * @param dirPath - Directory path.
     */
    FileUtils.getDescendantDirectories = function (fileSystemWrapper, dirPath) {
        // todo: unit tests...
        return Array.from(getDescendantDirectories(dirPath));
        function getDescendantDirectories(currentDirPath) {
            var subDirPaths, subDirPaths_1, subDirPaths_1_1, subDirPath, e_2_1, e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        subDirPaths = fileSystemWrapper.readDirSync(currentDirPath).filter(function (d) { return fileSystemWrapper.directoryExistsSync(d); });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 7, 8, 9]);
                        subDirPaths_1 = __values(subDirPaths), subDirPaths_1_1 = subDirPaths_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!subDirPaths_1_1.done) return [3 /*break*/, 6];
                        subDirPath = subDirPaths_1_1.value;
                        return [4 /*yield*/, subDirPath];
                    case 3:
                        _b.sent();
                        return [5 /*yield**/, __values(getDescendantDirectories(subDirPath))];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        subDirPaths_1_1 = subDirPaths_1.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (subDirPaths_1_1 && !subDirPaths_1_1.done && (_a = subDirPaths_1.return)) _a.call(subDirPaths_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        }
    };
    /**
     * Gets the glob as absolute.
     * @param glob - Glob.
     * @param cwd - Current working directory.
     */
    FileUtils.toAbsoluteGlob = function (glob, cwd) {
        return toAbsoluteGlob(glob, { cwd: cwd });
    };
    /**
     * Gets if the glob is a negated glob.
     * @param glob - Glob.
     */
    FileUtils.isNegatedGlob = function (glob) {
        return isNegatedGlob(glob).negated;
    };
    /**
     * Gets the glob's directory.
     * @param glob - Glob.
     */
    FileUtils.getGlobDir = function (glob) {
        return globParent(glob);
    };
    FileUtils.standardizeSlashesRegex = /\\/g;
    FileUtils.trimSlashStartRegex = /^\//;
    FileUtils.trimSlashEndRegex = /\/$/;
    FileUtils.ENOENT = "ENOENT";
    return FileUtils;
}());
exports.FileUtils = FileUtils;
