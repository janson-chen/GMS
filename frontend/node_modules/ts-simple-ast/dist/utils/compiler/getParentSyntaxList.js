"use strict";
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("../../typescript");
function getParentSyntaxList(node) {
    var parent = node.parent;
    if (parent == null)
        return undefined;
    var pos = node.pos, end = node.end;
    try {
        for (var _a = __values(parent.getChildren()), _b = _a.next(); !_b.done; _b = _a.next()) {
            var child = _b.value;
            if (child.pos > end || child === node)
                return undefined;
            if (child.kind === typescript_1.SyntaxKind.SyntaxList && child.pos <= pos && child.end >= end)
                return child;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return undefined; // shouldn't happen
    var e_1, _c;
}
exports.getParentSyntaxList = getParentSyntaxList;
