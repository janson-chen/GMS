"use strict";
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("../../typescript");
function getSyntaxKindName(kind) {
    return getKindCache()[kind];
}
exports.getSyntaxKindName = getSyntaxKindName;
var kindCache = undefined;
function getKindCache() {
    if (kindCache != null)
        return kindCache;
    kindCache = {};
    try {
        // some SyntaxKinds are repeated, so only use the first one
        for (var _a = __values(Object.keys(typescript_1.SyntaxKind).filter(function (k) { return isNaN(parseInt(k, 10)); })), _b = _a.next(); !_b.done; _b = _a.next()) {
            var name = _b.value;
            var value = typescript_1.SyntaxKind[name];
            if (kindCache[value] == null)
                kindCache[value] = name;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return kindCache;
    var e_1, _c;
}
