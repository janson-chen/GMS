"use strict";
var __generator = (this && this.__generator)/* istanbul ignore next */ || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read)/* istanbul ignore next */ || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TypeGuards_1 = require("../TypeGuards");
var collections_1 = require("../collections");
var compiler_1 = require("../compiler");
var SourceFileReferenceContainer = /** @class */ (function () {
    function SourceFileReferenceContainer(sourceFile) {
        this.sourceFile = sourceFile;
        this.nodesInThis = new collections_1.KeyValueCache();
        this.nodesInOther = new collections_1.KeyValueCache();
    }
    SourceFileReferenceContainer.prototype.getDependentSourceFiles = function () {
        this.sourceFile.global.lazyReferenceCoordinator.refreshDirtySourceFiles();
        var hashSet = collections_1.createHashSet();
        try {
            for (var _a = __values(this.nodesInOther.getKeys()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var nodeInOther = _b.value;
                hashSet.add(nodeInOther.sourceFile);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return hashSet.values();
        var e_1, _c;
    };
    SourceFileReferenceContainer.prototype.getLiteralsReferencingOtherSourceFilesEntries = function () {
        this.sourceFile.global.lazyReferenceCoordinator.refreshSourceFileIfDirty(this.sourceFile);
        return this.nodesInThis.getEntries();
    };
    SourceFileReferenceContainer.prototype.getReferencingLiteralsInOtherSourceFiles = function () {
        this.sourceFile.global.lazyReferenceCoordinator.refreshDirtySourceFiles();
        return this.nodesInOther.getKeys();
    };
    SourceFileReferenceContainer.prototype.getReferencingNodesInOtherSourceFiles = function () {
        var _a, _b, literal, parent, grandParent, e_2_1, e_2, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 7, 8, 9]);
                    _a = __values(this.getReferencingLiteralsInOtherSourceFiles()), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 6];
                    literal = _b.value;
                    parent = literal.getParentOrThrow();
                    grandParent = parent.getParent();
                    if (!(grandParent != null && TypeGuards_1.TypeGuards.isImportEqualsDeclaration(grandParent))) return [3 /*break*/, 3];
                    return [4 /*yield*/, grandParent];
                case 2:
                    _d.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, literal.getParentOrThrow()];
                case 4:
                    _d.sent();
                    _d.label = 5;
                case 5:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_2_1 = _d.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 9: return [2 /*return*/];
            }
        });
    };
    SourceFileReferenceContainer.prototype.refresh = function () {
        this.clear();
        this.populateReferences();
    };
    SourceFileReferenceContainer.prototype.clear = function () {
        try {
            for (var _a = __values(this.nodesInThis.getEntries()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), node = _c[0], sourceFile = _c[1];
                this.nodesInThis.removeByKey(node);
                sourceFile._referenceContainer.nodesInOther.removeByKey(node);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _d;
    };
    SourceFileReferenceContainer.prototype.populateReferences = function () {
        var _this = this;
        this.sourceFile.global.compilerFactory.forgetNodesCreatedInBlock(function (remember) {
            var addNode = function (literal, sourceFile) {
                if (sourceFile == null)
                    return;
                _this.addNodeInThis(literal, sourceFile);
                remember(literal);
            };
            try {
                for (var _a = __values(_this.sourceFile.getImportStringLiterals()), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var literal = _b.value;
                    var parent = literal.getParentOrThrow();
                    var grandParent = parent.getParent();
                    if (TypeGuards_1.TypeGuards.isImportDeclaration(parent) || TypeGuards_1.TypeGuards.isExportDeclaration(parent))
                        addNode(literal, parent.getModuleSpecifierSourceFile());
                    else if (grandParent != null && TypeGuards_1.TypeGuards.isImportEqualsDeclaration(grandParent))
                        addNode(literal, grandParent.getExternalModuleReferenceSourceFile());
                    else if (TypeGuards_1.TypeGuards.isCallExpression(parent)) {
                        var literalSymbol = literal.getSymbol();
                        if (literalSymbol != null)
                            addNode(literal, compiler_1.ModuleUtils.getReferencedSourceFileFromSymbol(literalSymbol));
                    }
                    else
                        _this.sourceFile.global.logger.warn("Unknown import string literal parent: " + parent.getKindName());
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_4) throw e_4.error; }
            }
            var e_4, _c;
        });
    };
    SourceFileReferenceContainer.prototype.addNodeInThis = function (literal, sourceFile) {
        this.nodesInThis.set(literal, sourceFile);
        sourceFile._referenceContainer.nodesInOther.set(literal, sourceFile);
    };
    return SourceFileReferenceContainer;
}());
exports.SourceFileReferenceContainer = SourceFileReferenceContainer;
